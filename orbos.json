[{"html":"<blockquote>\n<p>This project is in alpha state. The API will continue breaking until version 1.0.0 is released</p>\n</blockquote>\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"What_Is_It\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"orbos#What_Is_It\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\tWhat Is It\n\t\t\t\t\t</h3><p><code>Orbiter</code> boostraps, lifecycles and destroys clustered software and other cluster managers whereas each can be configured to span over a wide range of infrastructure providers. Its focus is laid on automating away all <code>day two</code> operations, as we consider them to have much bigger impacts than <code>day one</code> operations from a business perspective.</p>\n<!-- ## How Does It Work\n\nAn Orbiter instance runs as a Kubernetes Pod managing the configured clusters (i.e. an Orb), typically including the one it is running on. It scales the clusters nodes and has `Node Agents` install software packages on their operating systems. `Node Agents` run as native system processes managed by `systemd`. An Orbs Git repository is the only source of truth for desired state. Also, the current Orbs state is continously pushed to its Git repository, so not only changes to the desired state is always tracked but also the most important changes to the actual systems state.\n\nFor more details, take a look at the [design docs](./docs/terminology.md).\n\n## Why Another Cluster Manager\n\nWe observe a universal trend of increasing system distribution. Key drivers are cloud native engineering, microservices architectures, global competition among hyperscalers and so on.\n\nWe embrace this trend but counteract its biggest downside, the associated increase of complexity in managing all these distributed systems. Our goal is to enable players of any size to run clusters of any type using infrastructure from any provider. Orbiter is a tool to do this in a reliable, secure, auditable, cost efficient way, preventing vendor lock-in, monoliths consisting of microservices and human failure doing repetitive tasks.\n\nWhat makes Orbiter special is that it ships with a nice **Mission Control UI** (currently in closed alpha) providing useful tools to interact intuitively with the operator. Also, the operational design follows the **GitOps pattern**, highlighting `day two operations`, sticking to a distinct source of truth for declarative system configuration and maintaining a consistent audit log, everything out-of-the-box. Then, the Orbiter code base is designed to be **highly extendable**, which ensures that any given cluster type can eventually run on any desired provider.\n\n## How To Use It\n\nIn the following example we will create a `kubernetes` cluster on a `static provider`. A `static provider` is a provider, which has no or little API for automation, e.g legacy VM's or Bare Metal scenarios. -->","metadata":{"title":"Introduction"},"subsections":[{"slug":"What_Is_It","title":"What Is It","level":3}],"slug":"Introduction","file":"00-introduction.md"},{"html":"\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"Create_Two_Virtual_Machines\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"orbos#Create_Two_Virtual_Machines\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\tCreate Two Virtual Machines\n\t\t\t\t\t</h3><blockquote>\n<p>Install KVM\n<a href=\"https://wiki.debian.org/KVM\" target=\"_blank\">https://wiki.debian.org/KVM</a></p>\n</blockquote>\n<blockquote>\n<p>Create a new SSH key pair</p>\n</blockquote>\n<div class=''><pre class='language-bash'><code>mkdir -p ~/.ssh &amp;&amp; ssh-keygen -t rsa -b 4096 -C <span class=\"hljs-string\">\"repo and VM bootstrap key\"</span> -P <span class=\"hljs-string\">\"\"</span> -f ~/.ssh/myorb_bootstrap -q</code></pre></div><blockquote>\n<p>Create and setup two new Virtual Machines. Make sure you have a sudo user called orbiter on the guest OS</p>\n</blockquote>\n<div class=''><pre class='language-bash'><code>./examples/k8s/static/machine.sh ./examples/k8s/static/kickstart.cfg ~/.ssh/orbitertest_bootstrap.pub master1\n./examples/k8s/static/machine.sh ./examples/k8s/static/kickstart.cfg ~/.ssh/orbitertest_bootstrap.pub worker1</code></pre></div><blockquote>\n<p>List the new virtual machines IP addresses</p>\n</blockquote>\n<div class=''><pre class='language-bash'><code><span class=\"hljs-keyword\">for</span> MACHINE <span class=\"hljs-keyword\">in</span> master1 worker1\n<span class=\"hljs-keyword\">do</span>\n\tvirsh domifaddr <span class=\"hljs-variable\">$MACHINE</span>\n<span class=\"hljs-keyword\">done</span></code></pre></div>","metadata":{"title":"Virtual Machines"},"subsections":[{"slug":"Create_Two_Virtual_Machines","title":"Create Two Virtual Machines","level":3}],"slug":"Virtual_Machines","file":"01-virtual-machines.md"},{"html":"\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"Initialize_A_Git_Repository\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"orbos#Initialize_A_Git_Repository\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\tInitialize A Git Repository\n\t\t\t\t\t</h3><blockquote>\n<p>Create a new Git Repository</p>\n</blockquote>\n<blockquote>\n<p>Add the public part of your new SSH key pair to the git repositories trusted deploy keys.</p>\n</blockquote>\n<div class=''><pre class='language-bash'><code>cat ~/.ssh/myorb_bootstrap</code></pre></div><blockquote>\n<p>Copy the file [orbiter.yml] to the root of your Repository.</p>\n</blockquote>\n<blockquote>\n<p>Replace the IPs in your orbiter.yml accordingly</p>\n</blockquote>\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"Complete_Your_Orb_Setup\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"orbos#Complete_Your_Orb_Setup\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\tComplete Your Orb Setup\n\t\t\t\t\t</h3><blockquote>\n<p>Download the latest orbctl</p>\n</blockquote>\n<div class=''><pre class='language-bash'><code>curl -s https://api.github.com/repos/caos/orbiter/releases/latest | grep <span class=\"hljs-string\">\"browser_download_url.*orbctl-<span class=\"hljs-variable\">$(uname)</span>-<span class=\"hljs-variable\">$(uname -m)</span>\"</span> | cut -d <span class=\"hljs-string\">'\"'</span> -f 4 | sudo wget -i - -O /usr/<span class=\"hljs-built_in\">local</span>/bin/orbctl\nsudo chmod +x /usr/<span class=\"hljs-built_in\">local</span>/bin/orbctl\nsudo chown $(id -u):$(id -g) /usr/<span class=\"hljs-built_in\">local</span>/bin/orbctl</code></pre></div><blockquote>\n<p>Create an orb file</p>\n</blockquote>\n<div class=''><pre class='language-bash'><code>mkdir -p ~/.orb\ncat &gt; ~/.orb/config &lt;&lt; EOF\nurl: git@github.com:me/my-orb.git\nmasterkey: $(openssl rand -base64 21)\nrepokey: |\n$(sed s/^/\\ \\ /g ~/.ssh/myorb_bootstrap)\nEOF</code></pre></div><blockquote>\n<p>Encrypt and write your ssh key pair to your repo</p>\n</blockquote>\n<div class=''><pre class='language-bash'><code><span class=\"hljs-comment\"># Add the bootstrap key pair to the remote secrets file. For simplicity, we use the repokey here.</span>\norbctl writesecret kvm.bootstrapkeyprivate --file ~/.ssh/myorb_bootstrap\norbctl writesecret kvm.bootstrapkeypublic --file ~/.ssh/myorb_bootstrap.pub</code></pre></div>","metadata":{"title":"Setup"},"subsections":[{"slug":"Initialize_A_Git_Repository","title":"Initialize A Git Repository","level":3},{"slug":"Complete_Your_Orb_Setup","title":"Complete Your Orb Setup","level":3}],"slug":"Setup","file":"02-setup.md"},{"html":"\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"Bootstrap_your_local_Kubernetes_cluster\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"orbos#Bootstrap_your_local_Kubernetes_cluster\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\tBootstrap your local Kubernetes cluster\n\t\t\t\t\t</h3><div class=''><pre class='language-bash'><code>orbctl takeoff</code></pre></div><blockquote>\n<p>As soon as the Orbiter has deployed itself to the cluster, you can decrypt the generated admin kubeconfig</p>\n</blockquote>\n<div class=''><pre class='language-bash'><code>mkdir -p ~/.kube\norbctl readsecret k8s.kubeconfig &gt; ~/.kube/config</code></pre></div><blockquote>\n<p>Wait for grafana to become running</p>\n</blockquote>\n<div class=''><pre class='language-bash'><code>kubectl --namespace caos-system get po -w</code></pre></div><blockquote>\n<p>Open your browser at localhost:8080 to show your new clusters dashboards</p>\n</blockquote>\n<div class=''><pre class='language-bash'><code>kubectl --namespace caos-system port-forward svc/grafana 8080:80</code></pre></div><blockquote>\n<p>Cleanup your environment</p>\n</blockquote>\n<div class=''><pre class='language-bash'><code><span class=\"hljs-keyword\">for</span> MACHINE <span class=\"hljs-keyword\">in</span> master1 worker1\n<span class=\"hljs-keyword\">do</span>\n\tvirsh destroy <span class=\"hljs-variable\">$MACHINE</span>\n\tvirsh undefine <span class=\"hljs-variable\">$MACHINE</span>\n<span class=\"hljs-keyword\">done</span></code></pre></div>","metadata":{"title":"Bootstrap"},"subsections":[{"slug":"Bootstrap_your_local_Kubernetes_cluster","title":"Bootstrap your local Kubernetes cluster","level":3}],"slug":"Bootstrap","file":"03-bootstrap.md"},{"html":"\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"Operating_System_Requirements\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"orbos#Operating_System_Requirements\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\tOperating System Requirements\n\t\t\t\t\t</h3><p>See [OS Requirements] for details.</p>\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"Supported_Clusters\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"orbos#Supported_Clusters\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\tSupported Clusters\n\t\t\t\t\t</h3><p>See [Clusters] for details.</p>\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"Supported_Providers\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"orbos#Supported_Providers\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\tSupported Providers\n\t\t\t\t\t</h3><p>See [Providers] for details.</p>\n\n\t\t\t\t\t<h3>\n\t\t\t\t\t\t<span id=\"How_To_Contribute\" class=\"offset-anchor\" ></span>\n\t\t\t\t\t\t<a href=\"orbos#How_To_Contribute\" class=\"anchor\" aria-hidden=\"true\"></a>\n\t\t\t\t\t\tHow To Contribute\n\t\t\t\t\t</h3><p>See [contribute] for details</p>\n","metadata":{"title":"Requirements"},"subsections":[{"slug":"Operating_System_Requirements","title":"Operating System Requirements","level":3},{"slug":"Supported_Clusters","title":"Supported Clusters","level":3},{"slug":"Supported_Providers","title":"Supported Providers","level":3},{"slug":"How_To_Contribute","title":"How To Contribute","level":3}],"slug":"Requirements","file":"04-requirements.md"},{"html":"<!-- ### License\n\nThe full functionality of the operator is and stays open source and free to use for everyone. We pay our wages by using Orbiter for selling further workload enterprise services like support, monitoring and forecasting, IAM, CI/CD, secrets management etc. Visit our [website](https://caos.ch) and get in touch.\n\n<!-- See the exact licensing terms [here](./LICENSE) -->\n\n<p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --&gt;</p>\n","metadata":{"title":"License"},"subsections":[],"slug":"License","file":"05-license.md"}]